{"ast":null,"code":"var _jsxFileName = \"/Users/user/notes-alecs/client/src/components/TaskForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button, Card, CardContent, CircularProgress, Grid, TextField, Typography } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskForm() {\n  _s();\n\n  const [task, setTask] = useState({\n    title: \"\",\n    description: \"\"\n  });\n  const [loading, setLoading] = useState(false);\n  const [editing, setEditing] = useState(false);\n  const navigate = useNavigate();\n  const params = useParams();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n\n    if (editing) {\n      await fetch(`http://localhost:4000/tasks/${params.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(task)\n      });\n    } else {\n      await fetch(\"http://localhost:4000/tasks\", {\n        method: \"POST\",\n        body: JSON.stringify(task),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    }\n\n    setLoading(false);\n    navigate(\"/\");\n  };\n\n  const handleChange = e => {\n    setTask({ ...task,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const loadTask = async id => {\n    const res = await fetch(`http://localhost:4000/tasks/${id}`);\n    const data = await res.json();\n    setTask({\n      title: data.title,\n      description: data.description\n    });\n    setEditing(true);\n  };\n\n  useEffect(() => {\n    if (params.id) {\n      loadTask(params.id);\n    }\n  }, [params.id]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xd: 3,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          mt: 5\n        },\n        style: {\n          backgroundColor: \"#04293A\",\n          padding: \"1rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"5\",\n          textAlign: \"center\",\n          color: \"#ECB365\",\n          children: \"Crear nota\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"filled\",\n              label: \"Escriba el titulo\",\n              sx: {\n                display: \"block\",\n                margin: \".5rem 0\"\n              },\n              name: \"title\",\n              value: task.title,\n              onChange: handleChange,\n              inputProps: {\n                style: {\n                  color: \"white\"\n                }\n              },\n              InputLabelProps: {\n                style: {\n                  color: \"#ECB365\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"filled\",\n              label: \"Escriba la descripcion\",\n              multiline: true,\n              rows: 4,\n              sx: {\n                display: \"block\",\n                margin: \".5rem 0\"\n              },\n              name: \"description\",\n              value: task.description,\n              onChange: handleChange,\n              inputProps: {\n                style: {\n                  color: \"white\"\n                }\n              },\n              InputLabelProps: {\n                style: {\n                  color: \"#ECB365\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              type: \"submit\",\n              disabled: !task.title || !task.description,\n              children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                color: \"inherit\",\n                size: 24\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 19\n              }, this) : \"Guardar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskForm, \"11GGaVq4IX7gahWoh/1uCAtIeVk=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = TaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"sources":["/Users/user/notes-alecs/client/src/components/TaskForm.js"],"names":["React","Button","Card","CardContent","CircularProgress","Grid","TextField","Typography","useState","useEffect","useNavigate","useParams","TaskForm","task","setTask","title","description","loading","setLoading","editing","setEditing","navigate","params","handleSubmit","e","preventDefault","fetch","id","method","headers","body","JSON","stringify","handleChange","target","name","value","loadTask","res","data","json","mt","backgroundColor","padding","display","margin","style","color"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,WAHF,EAIEC,gBAJF,EAKEC,IALF,EAMEC,SANF,EAOEC,UAPF,QAQO,eARP;AASA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC;AAC/BO,IAAAA,KAAK,EAAE,EADwB;AAE/BC,IAAAA,WAAW,EAAE;AAFkB,GAAD,CAAhC;AAKA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMa,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,MAAM,GAAGX,SAAS,EAAxB;;AAEA,QAAMY,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AAEAP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAGC,OAAH,EAAY;AACV,YAAMO,KAAK,CAAE,+BAA8BJ,MAAM,CAACK,EAAG,EAA1C,EAA6C;AACtDC,QAAAA,MAAM,EAAE,KAD8C;AAEtDC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAF6C;AAKtDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAenB,IAAf;AALgD,OAA7C,CAAX;AAOD,KARD,MASI;AACF,YAAMa,KAAK,CAAC,6BAAD,EAAgC;AACzCE,QAAAA,MAAM,EAAE,MADiC;AAEzCE,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAenB,IAAf,CAFmC;AAGzCgB,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAHgC,OAAhC,CAAX;AAKD;;AAGDX,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAG,IAAAA,QAAQ,CAAC,GAAD,CAAR;AACD,GAzBD;;AA2BA,QAAMY,YAAY,GAAIT,CAAD,IAAO;AAC1BV,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAW,OAACW,CAAC,CAACU,MAAF,CAASC,IAAV,GAAiBX,CAAC,CAACU,MAAF,CAASE;AAArC,KAAD,CAAP;AACD,GAFD;;AAIA,QAAMC,QAAQ,GAAG,MAAOV,EAAP,IAAc;AAC7B,UAAMW,GAAG,GAAG,MAAMZ,KAAK,CAAE,+BAA8BC,EAAG,EAAnC,CAAvB;AACA,UAAMY,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA1B,IAAAA,OAAO,CAAC;AAACC,MAAAA,KAAK,EAAEwB,IAAI,CAACxB,KAAb;AAAoBC,MAAAA,WAAW,EAAEuB,IAAI,CAACvB;AAAtC,KAAD,CAAP;AACAI,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GALD;;AAOAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,MAAM,CAACK,EAAX,EAAe;AACbU,MAAAA,QAAQ,CAACf,MAAM,CAACK,EAAR,CAAR;AACD;AACF,GAJQ,EAIN,CAACL,MAAM,CAACK,EAAR,CAJM,CAAT;AAMA,sBACE,QAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,UAAU,EAAC,QAHb;AAIE,IAAA,cAAc,EAAC,QAJjB;AAAA,2BAME,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA,6BACE,QAAC,IAAD;AACE,QAAA,EAAE,EAAE;AAAEc,UAAAA,EAAE,EAAE;AAAN,SADN;AAEE,QAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAE,SADZ;AAELC,UAAAA,OAAO,EAAE;AAFJ,SAFT;AAAA,gCAOE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,GAApB;AAAwB,UAAA,SAAS,EAAC,QAAlC;AAA2C,UAAA,KAAK,EAAC,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,eAUE,QAAC,WAAD;AAAA,iCACE;AAAM,YAAA,QAAQ,EAAEpB,YAAhB;AAAA,oCACE,QAAC,SAAD;AACE,cAAA,OAAO,EAAC,QADV;AAEE,cAAA,KAAK,EAAC,mBAFR;AAGE,cAAA,EAAE,EAAE;AACFqB,gBAAAA,OAAO,EAAE,OADP;AAEFC,gBAAAA,MAAM,EAAE;AAFN,eAHN;AAOE,cAAA,IAAI,EAAC,OAPP;AAQE,cAAA,KAAK,EAAEhC,IAAI,CAACE,KARd;AASE,cAAA,QAAQ,EAAEkB,YATZ;AAUE,cAAA,UAAU,EAAE;AAAEa,gBAAAA,KAAK,EAAE;AAAEC,kBAAAA,KAAK,EAAE;AAAT;AAAT,eAVd;AAWE,cAAA,eAAe,EAAE;AAAED,gBAAAA,KAAK,EAAE;AAAEC,kBAAAA,KAAK,EAAE;AAAT;AAAT;AAXnB;AAAA;AAAA;AAAA;AAAA,oBADF,eAcE,QAAC,SAAD;AACE,cAAA,OAAO,EAAC,QADV;AAEE,cAAA,KAAK,EAAC,wBAFR;AAGE,cAAA,SAAS,MAHX;AAIE,cAAA,IAAI,EAAE,CAJR;AAKE,cAAA,EAAE,EAAE;AACFH,gBAAAA,OAAO,EAAE,OADP;AAEFC,gBAAAA,MAAM,EAAE;AAFN,eALN;AASE,cAAA,IAAI,EAAC,aATP;AAUE,cAAA,KAAK,EAAEhC,IAAI,CAACG,WAVd;AAWE,cAAA,QAAQ,EAAEiB,YAXZ;AAYE,cAAA,UAAU,EAAE;AAAEa,gBAAAA,KAAK,EAAE;AAAEC,kBAAAA,KAAK,EAAE;AAAT;AAAT,eAZd;AAaE,cAAA,eAAe,EAAE;AAAED,gBAAAA,KAAK,EAAE;AAAEC,kBAAAA,KAAK,EAAE;AAAT;AAAT;AAbnB;AAAA;AAAA;AAAA;AAAA,oBAdF,eA8BE,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAC,WAAhB;AAA4B,cAAA,KAAK,EAAC,SAAlC;AAA4C,cAAA,IAAI,EAAC,QAAjD;AAA0D,cAAA,QAAQ,EAAE,CAAClC,IAAI,CAACE,KAAN,IAAe,CAACF,IAAI,CAACG,WAAzF;AAAA,wBACGC,OAAO,gBACN,QAAC,gBAAD;AAAkB,gBAAA,KAAK,EAAC,SAAxB;AAAkC,gBAAA,IAAI,EAAE;AAAxC;AAAA;AAAA;AAAA;AAAA,sBADM,GAGN;AAJJ;AAAA;AAAA;AAAA;AAAA,oBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AA8DD;;GAtHuBL,Q;UASLF,W,EACFC,S;;;KAVOC,Q","sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  CircularProgress,\n  Grid,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nexport default function TaskForm() {\n  const [task, setTask] = useState({\n    title: \"\",\n    description: \"\",\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [editing, setEditing] = useState(false);\n\n  const navigate = useNavigate();\n  const params = useParams();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    setLoading(true);\n\n    if(editing) {\n      await fetch(`http://localhost:4000/tasks/${params.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(task),\n      });\n    }\n    else{\n      await fetch(\"http://localhost:4000/tasks\", {\n        method: \"POST\",\n        body: JSON.stringify(task),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n    }\n\n\n    setLoading(false);\n    navigate(\"/\");\n  };\n\n  const handleChange = (e) => {\n    setTask({ ...task, [e.target.name]: e.target.value });\n  };\n\n  const loadTask = async (id) => {\n    const res = await fetch(`http://localhost:4000/tasks/${id}`);\n    const data = await res.json();\n    setTask({title: data.title, description: data.description});\n    setEditing(true);\n  };\n\n  useEffect(() => {\n    if (params.id) {\n      loadTask(params.id);\n    }\n  }, [params.id])\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Grid item xd={3}>\n        <Card\n          sx={{ mt: 5 }}\n          style={{\n            backgroundColor: \"#04293A\",\n            padding: \"1rem\",\n          }}\n        >\n          <Typography variant=\"5\" textAlign=\"center\" color=\"#ECB365\">\n            Crear nota\n          </Typography>\n          <CardContent>\n            <form onSubmit={handleSubmit}>\n              <TextField\n                variant=\"filled\"\n                label=\"Escriba el titulo\"\n                sx={{\n                  display: \"block\",\n                  margin: \".5rem 0\",\n                }}\n                name=\"title\"\n                value={task.title}\n                onChange={handleChange}\n                inputProps={{ style: { color: \"white\" } }}\n                InputLabelProps={{ style: { color: \"#ECB365\" } }}\n              />\n              <TextField\n                variant=\"filled\"\n                label=\"Escriba la descripcion\"\n                multiline\n                rows={4}\n                sx={{\n                  display: \"block\",\n                  margin: \".5rem 0\",\n                }}\n                name=\"description\"\n                value={task.description}\n                onChange={handleChange}\n                inputProps={{ style: { color: \"white\" } }}\n                InputLabelProps={{ style: { color: \"#ECB365\" } }}\n              />\n\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={!task.title || !task.description}>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={24} />\n                ) : (\n                  \"Guardar\"\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}